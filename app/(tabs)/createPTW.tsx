import { Alert, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import React, { useState } from 'react'
import { heightPercentageToDP, widthPercentageToDP } from 'react-native-responsive-screen'
import { Router, useLocalSearchParams, useRouter, } from 'expo-router'
import AntDesign from '@expo/vector-icons/AntDesign';
import { Colors } from '@/constants/Colors';
import { Components } from '@/components';
import { ReportViewModal } from '@/components/Modal';
import { handleImagePicker } from '@/lib/helpers';
import Ionicons from '@expo/vector-icons/Ionicons';

const CreatePTW = () => {
    const router: Router = useRouter();
    const item = useLocalSearchParams();
    const [selectedTab, setSelectedTab] = React.useState({ text: "Hot Work", id: 0 })
    const [successModalVisible, setSuccessModalVisible] = useState(false);
    const [photos, setPhotos] = useState([]);

    const [date, setDate] = useState("")
    const [time, setTime] = useState("")

    const onSuccess = () => {
        setSuccessModalVisible(false)
        router.push({ 'pathname': '/(tabs)/' })
    }

    const tabs = [
        { text: "Hot Work", id: 0 },
        { id: 1, text: "Confined Space" },
        { id: 2, text: "Working at Height" },
    ]

    const addPhoto = async (index: number) => {
        try {
            const imageUri = await handleImagePicker();
            if (imageUri) {
                setPhotos((prevPhotos) => {
                    const newPhotos: any = [...prevPhotos];
                    newPhotos[index] = imageUri;
                    return newPhotos;
                });
            }
        } catch (error) {
            console.log(error, 'error')
            alert("Failed to add photo");
        }
    };

    const removePhoto = (index: number) => {
        Alert.alert(
            'Remove Photo',
            'Are you sure you want to delete this photo?',
            [
                {
                    text: 'Cancel',
                    style: 'cancel',
                },
                {
                    text: 'Delete',
                    onPress: () => {
                        setPhotos((prevPhotos) => {
                            const newPhotos = [...prevPhotos];
                            newPhotos.splice(index, 1);
                            return newPhotos;
                        });
                    },
                    style: 'destructive',
                },
            ]
        );
    };


    return (
        <>
            <View style={styles.topContainer} >
                <View style={styles.topSubContainer} >
                    <AntDesign onPress={() => router.push({ 'pathname': '/(tabs)/' })} name="left" size={24} color="black" />
                    <Text style={styles.headerText}>{item?.title ? 'Resubmit' : `Create`} PTW</Text>
                    <AntDesign style={{ opacity: 0 }} name="left" size={24} color="black" />
                </View>
            </View>

            <ScrollView showsVerticalScrollIndicator={false} style={{ paddingTop: heightPercentageToDP(2) }} >
                <View >
                    <View style={{ paddingHorizontal: widthPercentageToDP(5) }}>
                        <View style={{ gap: 20 }} >
                            <Text style={styles.headerText}>Permit Details</Text>
                            <Components.Input subTitle='This is generated by the system.' inputTitleStyles={{ fontSize: 14 }} title='Permit Number' placeholder='Enter Full Name' />
                            <Components.Input isTime value={time} setValue={setTime} inputTitleStyles={{ fontSize: 14 }} title='Issue date and time' placeholder='23 Jan 22, 18:00 PM' />
                            <Components.Input isTime value={date} setValue={setDate} inputTitleStyles={{ fontSize: 14 }} title='Expiry date and time' placeholder='23 Jan 22, 18:00 PM' />
                        </View>
                    </View>



                    {/* incident type */}

                    <View style={styles.navigationTopContainer}>

                        <Text style={styles.headerText}>Incident Type</Text>
                        <View style={{ flexDirection: 'row', gap: 10, marginTop: 10 }} >
                            {tabs.map((tab, index) => (
                                <TouchableOpacity key={index} onPress={() => setSelectedTab(tab)} style={[styles.tagBox, { backgroundColor: selectedTab.id === tab.id ? Colors.primary_blue : Colors.white, borderWidth: 1, borderColor: Colors.primary_blue }]}>
                                    <Text style={{ color: selectedTab.text === tab.text ? Colors.white : Colors.primary_blue }}>{tab.text}</Text>
                                </TouchableOpacity>
                            ))}
                        </View>
                    </View>
                    {/*  */}
                    <View style={styles.navigationTopContainer}>
                        <View style={{ gap: 10 }} >
                            <Text style={styles.headerText}>Work details</Text>

                            <Components.Input inputTitleStyles={{ fontSize: 12 }} title='Description of work' placeholder='' />
                            <Components.Input inputTitleStyles={{ fontSize: 12 }} title='Location' placeholder='' />

                        </View>
                    </View>
                    {/*  */}
                    <View style={styles.navigationTopContainer}>
                        <View style={{ gap: 10 }} >
                            <Text style={styles.headerText}>Safety Precautions</Text>
                            <Components.Input inputTitleStyles={{ fontSize: 12 }} title='Description of work' placeholder='' />
                        </View>
                    </View>
                    {/*  */}
                    <View style={styles.navigationTopContainer}>
                        <View style={{ gap: 10 }} >
                            <Text style={styles.headerText}>Permit Conditions</Text>
                            <Components.Input inputTitleStyles={{ fontSize: 12 }} title='Description of work' placeholder='' />
                        </View>
                    </View>

                    {/* photo section */}
                    <>
                        {photos.map((photo, index) => (
                            <View style={styles.navigationTopContainer}>
                                <View style={{ gap: 10 }} >
                                    <Text style={styles.headerText}>Photo Evidence #{index + 1}</Text>
                                    <View style={{ alignItems: 'center', justifyContent: 'center', height: heightPercentageToDP(photo ? 30 : 10), backgroundColor: Colors.light_grey }} >
                                        {photo ? (

                                            <View style={{ height: heightPercentageToDP(30), width: '100%' }} >
                                                <Image source={{ uri: photo }} style={styles.photo} />
                                                <TouchableOpacity
                                                    onPress={() => removePhoto(index)}
                                                    activeOpacity={0.7}
                                                    style={[styles.deleteIcon, { backgroundColor: 'white' }]} >

                                                    <Ionicons name="trash"
                                                        size={24} color={Colors.dark_red} />
                                                </TouchableOpacity>

                                            </View>
                                        )
                                            : (
                                                <View style={{ width: '100%' }} >
                                                    <Components.Button onPress={() => addPhoto(index)} title="ADD LIVE PHOTO" />
                                                </View>
                                            )
                                        }
                                    </View>
                                </View>
                            </View>
                        ))
                        }
                        <View style={styles.navigationTopContainer}>
                            <View style={{ gap: 10 }} >
                                <Text style={styles.headerText}>Photo Evidence #{photos.length + 1}</Text>
                                <View style={{ alignItems: 'center', justifyContent: 'center', height: heightPercentageToDP(10), backgroundColor: Colors.light_grey }} >
                                    <View style={{ width: '70%' }} >
                                        <Components.Button onPress={() => addPhoto(photos.length)} title="ADD LIVE PHOTO" />
                                    </View>
                                </View>
                                <Text style={styles.key} >In an unsafe environment?</Text>
                                <Components.Button buttonContainerStyle={{ borderWidth: 1, borderColor: Colors.orange, height: heightPercentageToDP(4.5) }} backgroundColor='white' textColor={Colors.orange} onPress={() => addPhoto(photos.length)} title="UPLOAD PHOTO" />
                                <Text style={[styles.value, { fontSize: 14 }]}>Note that you should only upload photo if it is an unsafe environment.</Text>
                            </View>
                        </View>


                    </>


                    {/*  */}

                    <View style={styles.navigationTopContainer}>
                        <View style={{ gap: 20 }} >
                            <Text style={styles.headerText}>Other Details</Text>
                            <Components.Input inputTitleStyles={{ fontSize: 12 }} title='Description' placeholder='' />
                        </View>
                    </View>

                    {item?.isRejected === "yes" ?
                        <View style={styles.navigationTopContainer}>
                            <View style={{ gap: 20 }} >
                                <Text style={styles.headerText}>Issuer Detail</Text>
                                <View style={{ gap: 10 }} >
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Name: </Text>
                                        <Text style={styles.value}>Peter Tan</Text>
                                    </View>
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Role: </Text>
                                        <Text style={styles.value}>Supervisor</Text>
                                    </View>
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Issued: </Text>
                                        <Text style={styles.value}>4 Feb 22 at 14:05</Text>
                                    </View>
                                </View>

                            </View>
                        </View>

                        : <View style={styles.navigationTopContainer}>
                            <View style={{ gap: 20 }} >
                                <Text style={styles.headerText}>Issuer Detail</Text>
                                <View style={{ gap: 10 }} >
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Name: </Text>
                                        <Text style={styles.value}>Peter Tan</Text>
                                    </View>
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Role: </Text>
                                        <Text style={styles.value}>Supervisor</Text>
                                    </View>
                                </View>
                                <View style={{ marginTop: heightPercentageToDP(3) }}>
                                    <Components.Button disabled={!photos.length} onPress={() => setSuccessModalVisible(true)} title={`submit for approval`.toUpperCase()} />
                                </View>
                            </View>
                        </View>}
                    {item?.isRejected === "yes" &&
                        <View style={styles.navigationTopContainer}>
                            <View style={{ gap: 20 }} >
                                <Text style={styles.headerText}>Safety Assessor</Text>
                                <View style={{ gap: 10 }} >
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Name: </Text>
                                        <Text style={styles.value}>Charles Lim</Text>
                                    </View>
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Role: </Text>
                                        <Text style={styles.value}>Chief Safety Assessor</Text>
                                    </View>
                                    <View style={{ flexDirection: 'row', gap: 5 }} >
                                        <Text style={styles.key}>Rejected: </Text>
                                        <Text style={styles.value}>4 Feb 22 at 14:05</Text>
                                    </View>
                                    <View style={{ gap: 5 }} >
                                        <Text style={styles.key}>Reason for rejection: </Text>
                                        <Text style={styles.value}>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.</Text>
                                    </View>
                                </View>
                                <View style={{ marginTop: heightPercentageToDP(3) }}>
                                    <Components.Button disabled={!photos.length} onPress={() => setSuccessModalVisible(true)} title={`Resubmit`.toUpperCase()} />
                                </View>
                            </View>
                        </View>
                    }

                </View>

                <View style={{ paddingTop: heightPercentageToDP(2) }} />
                <ReportViewModal cta={() => onSuccess()} buttonTitle='go back home' title={item?.isRejected === "yes" ? "This PTW is successfully resubmitted for approval" : 'Your Permit To Work has been successfully created'} subTitle='Go back home to view all other PTWs that are pending action.' modalVisible={successModalVisible} setModalVisible={setSuccessModalVisible} />


            </ScrollView>
        </>
    )
}

export default CreatePTW

const styles = StyleSheet.create({
    topContainer: {
        height: heightPercentageToDP(10),
        justifyContent: 'flex-end',
        backgroundColor: Colors.white,
        paddingBottom: 10
    },
    topSubContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingHorizontal: widthPercentageToDP(5)
    },
    tagContainer: { marginTop: heightPercentageToDP(1), flexDirection: "row", gap: 5, alignItems: 'center' },
    tagBox: {
        paddingHorizontal: 15,
        paddingVertical: 5,
        borderRadius: 100,
    },
    headerText: {
        fontSize: widthPercentageToDP(4.5),
        fontWeight: 'bold'
    },
    flexContainer: { flexDirection: "row", gap: 5, alignItems: 'center', justifyContent: 'space-between' },
    keyText: {
        fontSize: widthPercentageToDP(3.5),
        fontWeight: 'bold',
        color: 'rgba(0, 0, 0, 0.6)'
    },
    valueText: {
        fontSize: widthPercentageToDP(3.5),
        color: 'rgba(0, 0, 0, 0.6)'
    },
    navigationTopContainer: { marginTop: heightPercentageToDP(2), backgroundColor: Colors.white, paddingVertical: heightPercentageToDP(2), paddingHorizontal: widthPercentageToDP(5) },
    navigationContainer: { marginTop: heightPercentageToDP(2), borderWidth: 1, borderColor: Colors.primary_blue, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', borderRadius: 5, paddingHorizontal: widthPercentageToDP(5), paddingVertical: heightPercentageToDP(1.5) },
    deleteIcon: {
        position: "absolute",
        top: 10,
        right: 10,
    },
    photo: {
        width: "100%",
        height: "100%",
        borderRadius: 10,
    },
    documentContainer: { backgroundColor: '#FAF9F6', borderRadius: 10, padding: 10, flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' },
    key: { fontWeight: "700", color: "rgba(0, 0, 0, 0.6)", fontSize: widthPercentageToDP(4) },
    value: { fontWeight: "400", color: "rgba(0, 0, 0, 0.6)", fontSize: widthPercentageToDP(4) }
})